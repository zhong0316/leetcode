package org.whuims.leetcode.hashtable;

import java.util.*;

public class MinimumRectangleArea {

    public static void main(String[] args) {
        MinimumRectangleArea minimumRectangleArea = new MinimumRectangleArea();
        int[][] points = {{38999,11635},{38999,16613},{38999,33148},{24077,11897},{24077,38181},{38999,29474},{24077,13329},{24077,25597},{38999,31066},{38999,33409},{24077,13670},{38999,16856},{24077,12370},{24077,17494},{38999,11685},{24077,28826},{24077,21093},{24077,7216},{38999,28035},{24077,34418},{38999,13670},{38999,37649},{24077,18830},{38999,9867},{38999,21416},{24077,1574},{38999,16988},{38999,5742},{24077,27463},{24077,39016},{24077,18057},{24077,17322},{24077,4758},{24077,37369},{38999,38742},{24077,37232},{38999,4931},{38999,36960},{38999,431},{38999,251},{38999,34759},{38999,33157},{24077,8824},{24077,5123},{38999,2588},{24077,26916},{38999,39395},{38999,17557},{24077,23581},{38999,37498},{24077,13257},{24077,6700},{38999,31635},{24077,6064},{24077,23046},{38999,11984},{38999,28826},{38999,23042},{38999,13257},{38999,12641},{24077,34430},{24077,20469},{24077,19019},{24077,36716},{38999,24927},{24077,15393},{24077,5742},{24077,33041},{38999,181},{24077,23617},{38999,39646},{24077,16856},{24077,36004},{24077,33148},{38999,31994},{24077,13961},{38999,34902},{24077,24715},{24077,8194},{38999,221},{38999,8712},{38999,18217},{38999,30325},{38999,5441},{24077,514},{38999,19046},{24077,30957},{24077,33409},{38999,13444},{38999,28660},{38999,291},{24077,38983},{38999,21316},{38999,9459},{24077,37336},{38999,17494},{24077,11685},{24077,26782},{38999,18830},{24077,8350},{24077,28693},{38999,34418},{24077,13163},{38999,2835},{24077,21730},{38999,17322},{24077,9166},{38999,39689},{24077,561},{24077,21416},{24077,36025},{38999,21531},{38999,27495},{24077,22592},{24077,19809},{38999,38181},{24077,13848},{24077,825},{24077,31920},{38999,13571},{24077,5159},{24077,2835},{38999,11817},{24077,8619},{38999,18084},{38999,23939},{24077,13571},{24077,33157},{24077,21531},{38999,628},{24077,37180},{38999,15418},{38999,26540},{24077,10637},{38999,18057},{24077,36323},{38999,30957},{38999,31304},{24077,11195},{24077,15889},{38999,3430},{24077,27750},{24077,15418},{24077,6729},{24077,8042},{24077,17344},{38999,14681},{38999,34430},{38999,6053},{38999,15135},{24077,10648},{24077,251},{38999,2625},{24077,35764},{24077,25387},{38999,26916},{38999,20592},{38999,24715},{38999,8758},{38999,10498},{24077,12187},{24077,14374},{24077,753},{24077,31932},{38999,17344},{24077,30784},{38999,6700},{24077,15135},{24077,30325},{38999,9022},{24077,16088},{38999,35061},{24077,16988},{24077,30984},{38999,31890},{24077,11817},{38999,13350},{38999,36025},{24077,8758},{24077,36695},{24077,23193},{24077,38842},{24077,700},{38999,38983},{24077,3430},{38999,32896},{38999,15339},{24077,9022},{24077,26603},{24077,33836},{38999,700},{24077,2756},{38999,10637},{24077,33200},{24077,33798},{24077,32465},{24077,11913},{24077,39646},{24077,22785},{38999,29759},{24077,4931},{24077,28035},{24077,31994},{24077,4295},{24077,37385},{24077,32415},{38999,2756},{38999,9777},{38999,8619},{24077,35003},{24077,37649},{38999,9775},{24077,628},{24077,29759},{24077,15339},{38999,6064},{24077,18084},{38999,19081},{38999,22997},{24077,9459},{24077,26540},{24077,12802},{38999,22559},{24077,33721},{38999,15393},{24077,2588},{24077,31635},{38999,27750},{24077,13066},{24077,32352},{24077,16427},{24077,38595},{24077,22670},{24077,14681},{38999,8849},{24077,31440},{24077,17702},{24077,22559},{24077,21025},{38999,6206},{38999,21093},{24077,6053},{24077,20592},{24077,23042},{24077,19528},{38999,8476},{38999,39016},{24077,19046},{24077,6206},{24077,27999},{38999,32985},{24077,35491},{38999,28271},{38999,27463},{38999,36146},{24077,20684},{24077,29474},{38999,25597},{38999,36695},{38999,5159},{38999,28218},{24077,3849},{24077,8660},{24077,32896},{38999,26128},{38999,19528},{24077,27495},{24077,36146},{38999,20684},{38999,1126},{24077,12134},{38999,31920},{24077,28218},{38999,17986},{38999,15203},{38999,36716},{38999,36089},{24077,34902},{38999,16202},{38999,30984},{38999,21730},{38999,30249},{38999,9166},{24077,38600},{38999,23617},{38999,33126},{38999,37369},{38999,33475},{38999,32381},{38999,8814},{38999,33836},{24077,19081},{38999,38600},{24077,913},{38999,22670},{24077,11984},{38999,22785},{38999,1574},{38999,10648},{24077,7873},{38999,16176},{38999,12802},{38999,37385},{38999,35764},{38999,36323},{24077,1258},{24077,27266},{38999,31932},{38999,14941},{24077,9136},{38999,5123},{38999,20469},{38999,7873},{38999,32164},{24077,21249},{38999,24862},{38999,35491},{38999,28181},{38999,22592},{38999,19809},{38999,23046},{38999,23193},{24077,33165},{24077,38115},{38999,29308},{24077,37395},{24077,15596},{24077,38739},{24077,24862},{38999,1607},{38999,33200},{24077,17861},{38999,16427},{24077,38605},{38999,30675},{38999,4758},{38999,15889},{38999,1638},{38999,37336},{24077,36960},{38999,17861},{24077,15266},{38999,13329},{38999,29864},{38999,8194},{38999,6729},{24077,29628},{24077,221},{38999,38605},{38999,14456},{24077,32512},{38999,12531},{24077,13444},{38999,34817},{24077,22673},{24077,32381},{38999,23035},{24077,28660},{38999,4295},{38999,33721},{38999,26603},{38999,7216},{24077,15619},{38999,3849},{24077,1126},{24077,9777},{38999,30784},{24077,12641},{38999,37395},{24077,8571},{38999,15012},{24077,34817},{38999,27266},{24077,34759},{24077,14941},{38999,34457},{24077,35061},{24077,39395},{38999,23581},{38999,38595},{38999,12417},{38999,12134},{38999,27999},{24077,5441},{24077,32164},{24077,28271},{24077,29308},{38999,15122},{38999,22579},{24077,10498},{38999,753},{24077,21316},{38999,8350},{38999,19191},{38999,15596},{24077,8476},{38999,16088},{38999,38739},{38999,26782},{38999,33165},{38999,33041},{24077,13350},{24077,15122},{24077,22579},{38999,30072},{38999,13961},{24077,17986},{24077,15203},{38999,25387},{38999,15266},{38999,32352},{38999,21249},{38999,14374},{24077,16202},{38999,3316},{24077,14456},{38999,32465},{24077,34457},{24077,26128},{24077,33126},{38999,9344},{24077,29864},{24077,11635},{38999,15643},{24077,181},{24077,19191},{38999,14416},{24077,8814},{24077,31066},{38999,15619},{24077,31304},{38999,11195},{38999,11897},{38999,913},{24077,9775},{24077,15643},{38999,28693},{38999,33798},{38999,561},{38999,8571},{38999,13848},{24077,17557},{38999,825},{24077,2625},{38999,9136},{24077,23939},{24077,15012},{38999,11913},{38999,32512},{24077,12531},{38999,12187},{24077,9867},{24077,38742},{38999,31440},{24077,3316},{38999,37180},{38999,13163},{38999,21025},{24077,16176},{24077,23035},{24077,22997},{24077,12417},{38999,37232},{38999,1258},{24077,33475},{24077,431},{24077,37498},{38999,514},{24077,1607},{38999,38842},{38999,8824},{38999,13066},{24077,36089},{24077,30675},{24077,8849},{24077,8712},{24077,30249},{24077,18217},{38999,17702},{24077,28181},{24077,30072},{24077,291},{24077,1638},{38999,38115},{24077,24927},{38999,32415},{38999,29628},{24077,16613},{38999,8660},{38999,35003},{38999,36004},{38999,8042},{38999,22673},{24077,32985},{24077,14416},{24077,31890},{38999,12370},{38999,19019},{24077,39689},{24077,9344}};
        long start = System.currentTimeMillis();
        int res = minimumRectangleArea.minAreaRect(points);
        System.out.println(res);
        System.out.println(System.currentTimeMillis() - start);
    }

    public int minAreaRect(int[][] points) {
        int min = Integer.MAX_VALUE;
        int n = points.length;
        Map<Integer, Set<Integer>> cache = new HashMap<>();
        for (int[] point : points) {
            if (!cache.containsKey(point[0])) {
                cache.put(point[0], new HashSet<>());
            }
            cache.get(point[0]).add(point[1]);
        }
        for (int i = 0; i < n; i++) {
            int[] p1 = points[i];
            for (int j = i + 1; j < n; j++) {
                int[] p2 = points[j];
                if (points[i][0] == points[j][0] || points[i][1] == points[j][1]) continue;
                if (cache.get(p1[0]).contains(p2[1]) && cache.get(p2[0]).contains(p1[1])) {
                    min = Math.min(min, Math.abs(p2[0] - p1[0]) * Math.abs(p2[1] - p1[1]));
                }
            }
        }
        return min == Integer.MAX_VALUE ? 0 : min;
    }
}
